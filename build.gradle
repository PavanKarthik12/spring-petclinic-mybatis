plugins {
  id "org.sonarqube" version "2.7"
  id 'jacoco'
  id 'java'
  id 'eclipse'
//  id 'checkstyle'
//  id 'findbugs'
  id "org.springframework.boot" version "2.1.8.RELEASE"
  id "io.spring.dependency-management" version "1.0.8.RELEASE"
}

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-security')

    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-cache')

    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2")

    compile('com.fasterxml.jackson.core:jackson-core')
    compile('com.fasterxml.jackson.core:jackson-databind')
    compile('javax.xml.bind:jaxb-api:' + jaxbApiVersion)

    compile('io.springfox:springfox-swagger2:' + springfoxSwaggerVersion)
    compile('io.springfox:springfox-swagger-ui:' + springfoxSwaggerVersion)

    runtime('mysql:mysql-connector-java')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
    testCompile('org.mockito:mockito-core')
    testCompile('org.hamcrest:hamcrest-all:' + hamcrestVersion)
    testCompile('com.jayway.jsonpath:json-path')
    testCompile 'capital.scalable:spring-auto-restdocs-core:2.0.6'
    
    developmentOnly("org.springframework.boot:spring-boot-devtools")
}


eclipse {
    classpath {
//        downloadJavadoc = true
  //      downloadSources = true

        defaultOutputDir = file('build/default')
        file.whenMerged {
            entries.each {
                source ->
                    // This seems kludgy.  If the second test is omitted, it fails processing a 'Project Dependency' entry
                    if (source.kind == 'src' && source.hasProperty('output')) {
                        def outputPath = source.output
                        switch(source.path) {
                            case 'src/main/java':
                              outputPath = 'build/classes/java/main'
                              break
                            case 'src/main/resources':
                              outputPath = 'build/resources/main'
                              break
                            case 'src/test/java':
                              outputPath = 'build/classes/java/test'
                              break
                            case 'src/test/resources':
                              outputPath = 'build/resources/test'
                              break
                        }

                        source.output = outputPath
                    }
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "spring-petclinic-mybatis"
        property "sonar.projectKey", "artificerpi_spring-petclinic-mybatis"
    }
}
